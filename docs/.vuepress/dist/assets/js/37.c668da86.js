(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{239:function(t,s,a){"use strict";a.r(s);var e=a(0),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"js事件循环执行机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js事件循环执行机制","aria-hidden":"true"}},[t._v("#")]),t._v(" js事件循环执行机制")]),t._v(" "),a("p",[t._v("关键词：单线程，执行栈，宏任务，微任务，同步任务，异步任务")]),t._v(" "),a("ol",[a("li",[t._v("所有的同步任务都在主线程上执行，形成一个执行栈")]),t._v(" "),a("li",[t._v("事件触发线程管理一个任务队列，当异步任务运行完成，就在任务队列\b中放置一个事件")]),t._v(" "),a("li",[t._v("\b一旦执行栈中的所有\b同步任务\b执行完毕，即JS引擎空闲，系统就会读取任务队列，将异步回调的任务添加到可执行栈中执行。")])]),t._v(" "),a("p",[t._v("事件循环图")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/img/事件循环.png")}}),t._v(" "),a("h3",{attrs:{id:"宏任务-macrotask-和微任务-microtask"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#宏任务-macrotask-和微任务-microtask","aria-hidden":"true"}},[t._v("#")]),t._v(" 宏任务(macrotask)和微任务(microtask)")]),t._v(" "),a("p",[t._v("js中分两种任务类型，macrotask和microtask,在ECMAScript中，microtask称为jobs，macrotask可称为task.")]),t._v(" "),a("ul",[a("li",[t._v("macrotask，每次执行栈执行的代码就是一个宏任务（包括每次从事件队列中获取一个事件回调并放到执行栈中执行）\n"),a("ul",[a("li",[t._v("每一个task会从头到尾将这个任务执行完毕，不会执行其它")]),t._v(" "),a("li",[t._v("浏览器为了能够使得JS内部task与DOM任务能够有序的执行，会在一个task执行结束后，在下一个 task 执行开始前，对页面进行重新渲染")])])])]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("task"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("jobs"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("渲染"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("task"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ul",[a("li",[t._v("microtask，所有微任务也按顺序执行，且在以下场景会立即执行所有微任务\n"),a("ul",[a("li",[t._v("每个回调之后且js执行栈中为空，即使依然有同步事件。（下文有该例子，很经典）")]),t._v(" "),a("li",[t._v("每个宏任务结束后。（即事件循环的一般逻辑）")])])])]),t._v(" "),a("p",[t._v("宏任务和微任务的类型：")]),t._v(" "),a("ul",[a("li",[t._v("宏任务包括：script(全局任务), setTimeout, setInterval, setImmediate, I/O, UI rendering。")]),t._v(" "),a("li",[t._v("微任务包括: new Promise().then(回调), process.nextTick,MutationObserver(html5新特性)")])]),t._v(" "),a("p",[t._v("宏任务按顺序执行，且浏览器在每个宏任务之间渲染页面")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/img/宏任务和微任务.png")}}),t._v(" "),a("p",[t._v("参考文献")]),t._v(" "),a("h3",{attrs:{id:"node中的事件循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node中的事件循环","aria-hidden":"true"}},[t._v("#")]),t._v(" Node中的事件循环")]),t._v(" "),a("p",[t._v("process.nextTick   > promise  >  setTimeout   >   异步IO  >  setImmediate")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/img/nodeEventloop.jpg")}}),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://user-gold-cdn.xitu.io/2018/6/5/163ceb8ce3986025?imageslim",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tasks, microtasks, queues and schedules"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/",target:"_blank",rel:"noopener noreferrer"}},[t._v("node eventloop standard"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=r.exports}}]);