/**
 * Generated by "@vuepress/internal-site-data"
 */
export const siteData = {
  "title": "HMC NOTE",
  "description": "record hmc note",
  "base": "/HMC-VUEPRESS-NOTE/",
  "pages": [
    {
      "title": "Home",
      "frontmatter": {
        "home": true,
        "heroImage": "/img/李宗伟.jpg",
        "heroText": "用速度战胜，用力量压倒",
        "tagline": "生活在于记录和分享",
        "actionText": "Start",
        "actionLink": "/javascript进阶/",
        "features": [
          {
            "title": "Wiki - 求索",
            "details": "基于书签对知识点进行 整理，吸收，吐纳，归档。吾将上下而求索..."
          },
          {
            "title": "Store - 仓库",
            "details": "展望云仓库而归纳整理，方便行事&培养习惯。鱼和熊掌我全都要..."
          },
          {
            "title": "Thought - 随笔",
            "details": "人最大的精神力便是面对未得到但渴望但事情仍保持理性"
          }
        ],
        "footer": "MIT Licensed | Copyright © 2019.01.11-present HMC"
      },
      "regularPath": "/",
      "relativePath": "README.md",
      "key": "v-4b8cc0f7",
      "path": "/"
    },
    {
      "title": "文档3",
      "frontmatter": {},
      "regularPath": "/Standard/H5%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.html",
      "relativePath": "Standard/H5开发规范.md",
      "key": "v-3dc32637",
      "path": "/Standard/H5%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.html"
    },
    {
      "title": "HMC standard",
      "frontmatter": {},
      "regularPath": "/Standard/",
      "relativePath": "Standard/README.md",
      "key": "v-2f5c4a87",
      "path": "/Standard/"
    },
    {
      "title": "文档5",
      "frontmatter": {},
      "regularPath": "/Standard/H5%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83.html",
      "relativePath": "Standard/H5版本管理规范.md",
      "key": "v-6cb42922",
      "path": "/Standard/H5%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83.html"
    },
    {
      "frontmatter": {},
      "regularPath": "/css%E8%BF%9B%E9%98%B6/",
      "relativePath": "css进阶/README.md",
      "key": "v-b679b2ba",
      "path": "/css%E8%BF%9B%E9%98%B6/"
    },
    {
      "title": "111111",
      "frontmatter": {},
      "regularPath": "/css%E8%BF%9B%E9%98%B6/chapter1/line-height%E5%92%8Cvertical-align.html",
      "relativePath": "css进阶/chapter1/line-height和vertical-align.md",
      "key": "v-fb1c86da",
      "path": "/css%E8%BF%9B%E9%98%B6/chapter1/line-height%E5%92%8Cvertical-align.html"
    },
    {
      "title": "2222",
      "frontmatter": {},
      "regularPath": "/css%E8%BF%9B%E9%98%B6/chapter1/temp.html",
      "relativePath": "css进阶/chapter1/temp.md",
      "key": "v-e65edae4",
      "path": "/css%E8%BF%9B%E9%98%B6/chapter1/temp.html"
    },
    {
      "title": "JS上传文件的方式",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/DOM/js%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E5%BC%8F.html",
      "relativePath": "javascript进阶/DOM/js上传文件的方式.md",
      "key": "v-5d7bd0cd",
      "path": "/javascript%E8%BF%9B%E9%98%B6/DOM/js%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E5%BC%8F.html"
    },
    {
      "title": "promise, generator, async, await",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/JS%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C%E4%B8%93%E9%A2%98/promise,generator,async,await.html",
      "relativePath": "javascript进阶/JS异步操作专题/promise,generator,async,await.md",
      "key": "v-452ebbd5",
      "path": "/javascript%E8%BF%9B%E9%98%B6/JS%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C%E4%B8%93%E9%A2%98/promise,generator,async,await.html"
    },
    {
      "title": "xhr, ajax, axios, fetch异步请求梳理",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/JS%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C%E4%B8%93%E9%A2%98/xhr,ajax,axios,fetch%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%E6%A2%B3%E7%90%86.html",
      "relativePath": "javascript进阶/JS异步操作专题/xhr,ajax,axios,fetch异步请求梳理.md",
      "key": "v-0cbd6150",
      "path": "/javascript%E8%BF%9B%E9%98%B6/JS%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C%E4%B8%93%E9%A2%98/xhr,ajax,axios,fetch%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%E6%A2%B3%E7%90%86.html"
    },
    {
      "title": "单例模式",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1.%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html",
      "relativePath": "javascript进阶/JS设计模式/1.单例模式.md",
      "key": "v-616bfa34",
      "path": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1.%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html",
      "headers": [
        {
          "level": 2,
          "title": "单例模式：保证一个类仅有一个实例，\b并提供一个可访问它的全局访问点",
          "slug": "单例模式：保证一个类仅有一个实例，并提供一个可访问它的全局访问点"
        },
        {
          "level": 2,
          "title": "JS中的单例模式",
          "slug": "js中的单例模式"
        },
        {
          "level": 2,
          "title": "通用的惰性单例",
          "slug": "通用的惰性单例"
        }
      ]
    },
    {
      "title": "职责链模式",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/10.%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F.html",
      "relativePath": "javascript进阶/JS设计模式/10.职责链模式.md",
      "key": "v-1d9199e2",
      "path": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/10.%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F.html",
      "headers": [
        {
          "level": 3,
          "title": "职责链模式：使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系，将这些对象连成一条链。",
          "slug": "职责链模式：使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系，将这些对象连成一条链。"
        }
      ]
    },
    {
      "title": "中介者模式",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/11.%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F.html",
      "relativePath": "javascript进阶/JS设计模式/11.中介者模式.md",
      "key": "v-9ca9f03e",
      "path": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/11.%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F.html",
      "headers": [
        {
          "level": 3,
          "title": "中介者模式的作用就是解除对象与对象之间的紧耦合关系。增加一个中介者之后，所含有相关的对象都通过中介者对象来通信。",
          "slug": "中介者模式的作用就是解除对象与对象之间的紧耦合关系。增加一个中介者之后，所含有相关的对象都通过中介者对象来通信。"
        }
      ]
    },
    {
      "title": "装饰者模式",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/12.%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.html",
      "relativePath": "javascript进阶/JS设计模式/12.装饰者模式.md",
      "key": "v-06367a7f",
      "path": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/12.%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.html",
      "headers": [
        {
          "level": 3,
          "title": "装饰者模式可以动态地给某个对象添加一些职责，而不会影响从这个类中派生出的其他对象。",
          "slug": "装饰者模式可以动态地给某个对象添加一些职责，而不会影响从这个类中派生出的其他对象。"
        }
      ]
    },
    {
      "title": "\b状态模式",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/13.%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.html",
      "relativePath": "javascript进阶/JS设计模式/13.状态模式.md",
      "key": "v-1fb1705c",
      "path": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/13.%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.html",
      "headers": [
        {
          "level": 3,
          "title": "通常\b我们在进行封装的时候，封装的都是对象的行为，而不是对象的状态。而在状态模式中刚好相反，状态模式的关键是把事物的每种状态封装成一个单独的类。跟此状态相关的行为都被封装在这个类的内部。",
          "slug": "通常我们在进行封装的时候，封装的都是对象的行为，而不是对象的状态。而在状态模式中刚好相反，状态模式的关键是把事物的每种状态封装成一个单独的类。跟此状态相关的行为都被封装在这个类的内部。"
        },
        {
          "level": 3,
          "title": "状态模式定义二：允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类(上文是currState)",
          "slug": "状态模式定义二：允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类-上文是currstate"
        }
      ]
    },
    {
      "title": "适配器模式",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/14.%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.html",
      "relativePath": "javascript进阶/JS设计模式/14.适配器模式.md",
      "key": "v-5ea733b4",
      "path": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/14.%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.html",
      "headers": [
        {
          "level": 3,
          "title": "适配器模式相对简单，却十分常见",
          "slug": "适配器模式相对简单，却十分常见"
        }
      ]
    },
    {
      "title": "策略模式",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2.%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html",
      "relativePath": "javascript进阶/JS设计模式/2.策略模式.md",
      "key": "v-73046ef2",
      "path": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2.%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html",
      "headers": [
        {
          "level": 2,
          "title": "策略模式：定义一系列算法，把他们一个个封装起来\b，并且可以相互替换",
          "slug": "策略模式：定义一系列算法，把他们一个个封装起来，并且可以相互替换"
        }
      ]
    },
    {
      "title": "代理模式",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html",
      "relativePath": "javascript进阶/JS设计模式/3.代理模式.md",
      "key": "v-13bd97ca",
      "path": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html",
      "headers": [
        {
          "level": 2,
          "title": "代理模式：代理模式为对象提供一个代用品或占位符，以便控制对他的访问",
          "slug": "代理模式：代理模式为对象提供一个代用品或占位符，以便控制对他的访问"
        }
      ]
    },
    {
      "title": "迭代器模式",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/4.%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.html",
      "relativePath": "javascript进阶/JS设计模式/4.迭代器模式.md",
      "key": "v-fbee4d8a",
      "path": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/4.%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.html",
      "headers": [
        {
          "level": 2,
          "title": "迭代器模式：提供一种方法顺序访问一个聚合对象的\b各个元素，而又不需要暴露该对象的内部表示",
          "slug": "迭代器模式：提供一种方法顺序访问一个聚合对象的各个元素，而又不需要暴露该对象的内部表示"
        }
      ]
    },
    {
      "title": "命令模式",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/6.%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.html",
      "relativePath": "javascript进阶/JS设计模式/6.命令模式.md",
      "key": "v-5ffcf34d",
      "path": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/6.%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.html",
      "headers": [
        {
          "level": 3,
          "title": "命令模式场景： 有时候需要向某些对象发送请求，但是并不知道请求的接受者是谁，\b\b也不知道被请求的操作是什么，此时希望通过松耦合的方式，使请求发送者和请求接收者能够消除彼此的耦合关系。",
          "slug": "命令模式场景：-有时候需要向某些对象发送请求，但是并不知道请求的接受者是谁，也不知道被请求的操作是什么，此时希望通过松耦合的方式，使请求发送者和请求接收者能够消除彼此的耦合关系。"
        }
      ]
    },
    {
      "title": "组合模式",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.html",
      "relativePath": "javascript进阶/JS设计模式/7.组合模式.md",
      "key": "v-d1bc0ea2",
      "path": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.html",
      "headers": [
        {
          "level": 3,
          "title": "组合模式将对象组合成树形结构，以表示“整体-部分”的层次结构。组合模式的另一个好处是通过对象的多态性的表现，使得用户对于单个对象和组合\b对象的操作具有一致性。",
          "slug": "组合模式将对象组合成树形结构，以表示“整体-部分”的层次结构。组合模式的另一个好处是通过对象的多态性的表现，使得用户对于单个对象和组合对象的操作具有一致性。"
        }
      ]
    },
    {
      "title": "模板方法模式",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/8.%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.html",
      "relativePath": "javascript进阶/JS设计模式/8.模板方法模式.md",
      "key": "v-1e27bd95",
      "path": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/8.%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.html",
      "headers": [
        {
          "level": 3,
          "title": "模板方法模式由两部分结构组成，第一部分是抽象父类，第二部分是\b具体的实现子类。通常在父类中封装了子类的算法框架，\b子类通过继承这个抽象类，可以选择重写父类的方法。",
          "slug": "模板方法模式由两部分结构组成，第一部分是抽象父类，第二部分是具体的实现子类。通常在父类中封装了子类的算法框架，子类通过继承这个抽象类，可以选择重写父类的方法。"
        }
      ]
    },
    {
      "title": "享元模式",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/9.%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F.html",
      "relativePath": "javascript进阶/JS设计模式/9.享元模式.md",
      "key": "v-7129d78d",
      "path": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/9.%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F.html",
      "headers": [
        {
          "level": 3,
          "title": "享元模式是一种用于性能优化的模式，如果系统中因创建了大量的对象而占用内存过高，可通过享元模式节省空间",
          "slug": "享元模式是一种用于性能优化的模式，如果系统中因创建了大量的对象而占用内存过高，可通过享元模式节省空间"
        },
        {
          "level": 3,
          "title": "内部状态与外部状态",
          "slug": "内部状态与外部状态"
        },
        {
          "level": 3,
          "title": "享元模式的通用结构",
          "slug": "享元模式的通用结构"
        },
        {
          "level": 3,
          "title": "享元模式重构文件上传",
          "slug": "享元模式重构文件上传"
        }
      ]
    },
    {
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",
      "relativePath": "javascript进阶/JS设计模式/README.md",
      "key": "v-1e911b8c",
      "path": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"
    },
    {
      "title": "高阶\b函数",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0.html",
      "relativePath": "javascript进阶/JS设计模式/高阶函数.md",
      "key": "v-ace68296",
      "path": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0.html",
      "headers": [
        {
          "level": 2,
          "title": "1. 函数作为参数\b传入",
          "slug": "_1-函数作为参数传入"
        },
        {
          "level": 3,
          "title": "将函数作为异步请求的回调函数传入",
          "slug": "将函数作为异步请求的回调函数传入"
        },
        {
          "level": 3,
          "title": "当一些函数不适合\b执行一些请求时，把这个请求封装成一个函数，并把他当做参数传递给另一个函数",
          "slug": "当一些函数不适合执行一些请求时，把这个请求封装成一个函数，并把他当做参数传递给另一个函数"
        },
        {
          "level": 2,
          "title": "2. 函数作为返回值输出",
          "slug": "_2-函数作为返回值输出"
        },
        {
          "level": 2,
          "title": "3.高阶函数的其他应用",
          "slug": "_3-高阶函数的其他应用"
        }
      ]
    },
    {
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/",
      "relativePath": "javascript进阶/README.md",
      "key": "v-33f7eb31",
      "path": "/javascript%E8%BF%9B%E9%98%B6/"
    },
    {
      "title": "Vue slot嵌套传递和render中的scopedSlots属性",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/Vue%20%E7%AC%94%E8%AE%B0/Vue%20slot%E5%B5%8C%E5%A5%97%E4%BC%A0%E9%80%92%E5%92%8Crender%E4%B8%AD%E7%9A%84$slotScoped%E5%B1%9E%E6%80%A7.html",
      "relativePath": "javascript进阶/Vue 笔记/Vue slot嵌套传递和render中的$slotScoped属性.md",
      "key": "v-6dbbcdf4",
      "path": "/javascript%E8%BF%9B%E9%98%B6/Vue%20%E7%AC%94%E8%AE%B0/Vue%20slot%E5%B5%8C%E5%A5%97%E4%BC%A0%E9%80%92%E5%92%8Crender%E4%B8%AD%E7%9A%84$slotScoped%E5%B1%9E%E6%80%A7.html",
      "headers": [
        {
          "level": 2,
          "title": "Vue slot嵌套传递",
          "slug": "vue-slot嵌套传递"
        },
        {
          "level": 3,
          "title": "step1:在grandParent组件中使用parent, 并传入三个slot,两个是scopedSlot",
          "slug": "step1-在grandparent组件中使用parent-并传入三个slot-两个是scopedslot"
        },
        {
          "level": 3,
          "title": "step2:",
          "slug": "step2"
        },
        {
          "level": 3,
          "title": "step3:child组件",
          "slug": "step3-child组件"
        },
        {
          "level": 3,
          "title": "最终结果如下:",
          "slug": "最终结果如下"
        }
      ]
    },
    {
      "title": "Vue生命周期图示",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/Vue%20%E7%AC%94%E8%AE%B0/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA.html",
      "relativePath": "javascript进阶/Vue 笔记/Vue生命周期图示.md",
      "key": "v-1cdd30a3",
      "path": "/javascript%E8%BF%9B%E9%98%B6/Vue%20%E7%AC%94%E8%AE%B0/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA.html"
    },
    {
      "title": "深度和广度优先遍历DOM树",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/javascript%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0/DOM%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%92%8C%E5%B9%BF%E5%BA%A6%E9%81%8D%E5%8E%86.html",
      "relativePath": "javascript进阶/javascript原理实现/DOM树的深度和广度遍历.md",
      "key": "v-7023e904",
      "path": "/javascript%E8%BF%9B%E9%98%B6/javascript%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0/DOM%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%92%8C%E5%B9%BF%E5%BA%A6%E9%81%8D%E5%8E%86.html",
      "headers": [
        {
          "level": 2,
          "title": "深度优先遍历并输出带有tagName的node",
          "slug": "深度优先遍历并输出带有tagname的node"
        },
        {
          "level": 2,
          "title": "广度优先遍历并输出带有tagName的node",
          "slug": "广度优先遍历并输出带有tagname的node"
        }
      ]
    },
    {
      "title": "for in 和for of循环和可迭代对象",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/javascript%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0/for%20in%20%E5%92%8Cfor%20of%E5%BE%AA%E7%8E%AF%E5%92%8C%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1.html",
      "relativePath": "javascript进阶/javascript原理实现/for in 和for of循环和可迭代对象.md",
      "key": "v-b5a02fa4",
      "path": "/javascript%E8%BF%9B%E9%98%B6/javascript%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0/for%20in%20%E5%92%8Cfor%20of%E5%BE%AA%E7%8E%AF%E5%92%8C%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1.html"
    },
    {
      "title": "throttle和debounce",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/javascript%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0/throttle%E5%92%8Cdebounce.html",
      "relativePath": "javascript进阶/javascript原理实现/throttle和debounce.md",
      "key": "v-1e222d58",
      "path": "/javascript%E8%BF%9B%E9%98%B6/javascript%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0/throttle%E5%92%8Cdebounce.html"
    },
    {
      "title": "不同继承方法记录",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/javascript%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0/%E4%B8%8D%E5%90%8C%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0.html",
      "relativePath": "javascript进阶/javascript原理实现/不同继承方式的实现.md",
      "key": "v-0ef695a2",
      "path": "/javascript%E8%BF%9B%E9%98%B6/javascript%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0/%E4%B8%8D%E5%90%8C%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0.html",
      "headers": [
        {
          "level": 2,
          "title": "1. 原型链继承",
          "slug": "_1-原型链继承"
        },
        {
          "level": 2,
          "title": "2.经典继承，使用构造函数",
          "slug": "_2-经典继承，使用构造函数"
        },
        {
          "level": 2,
          "title": "3.组合继承",
          "slug": "_3-组合继承"
        },
        {
          "level": 2,
          "title": "4.原型式继承",
          "slug": "_4-原型式继承"
        },
        {
          "level": 2,
          "title": "5.寄生式继承",
          "slug": "_5-寄生式继承"
        },
        {
          "level": 2,
          "title": "6.寄生组合式继承",
          "slug": "_6-寄生组合式继承"
        }
      ]
    },
    {
      "title": "数组去重,扁平, 最值",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/javascript%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D,%E6%89%81%E5%B9%B3,%20%E6%9C%80%E5%80%BC.html",
      "relativePath": "javascript进阶/javascript原理实现/数组去重,扁平, 最值.md",
      "key": "v-6cd7bb82",
      "path": "/javascript%E8%BF%9B%E9%98%B6/javascript%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D,%E6%89%81%E5%B9%B3,%20%E6%9C%80%E5%80%BC.html"
    },
    {
      "title": "浅拷贝与深拷贝",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/javascript%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%AE%9E%E7%8E%B0.html",
      "relativePath": "javascript进阶/javascript原理实现/深拷贝和浅拷贝的实现.md",
      "key": "v-62c08f04",
      "path": "/javascript%E8%BF%9B%E9%98%B6/javascript%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%AE%9E%E7%8E%B0.html",
      "headers": [
        {
          "level": 3,
          "title": "浅拷贝之模拟Object.assign的实现",
          "slug": "浅拷贝之模拟object-assign的实现"
        },
        {
          "level": 3,
          "title": "深拷贝",
          "slug": "深拷贝"
        },
        {
          "level": 3,
          "title": "参考文献",
          "slug": "参考文献"
        }
      ]
    },
    {
      "title": "获取函数中的参数",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/javascript%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0/%E8%8E%B7%E5%8F%96%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0.html",
      "relativePath": "javascript进阶/javascript原理实现/获取函数中的参数.md",
      "key": "v-a8e80436",
      "path": "/javascript%E8%BF%9B%E9%98%B6/javascript%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0/%E8%8E%B7%E5%8F%96%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0.html"
    },
    {
      "title": "js事件循环执行机制",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/javascript%E6%B7%B1%E5%85%A5/JS%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6.html",
      "relativePath": "javascript进阶/javascript深入/JS事件循环执行机制.md",
      "key": "v-22422965",
      "path": "/javascript%E8%BF%9B%E9%98%B6/javascript%E6%B7%B1%E5%85%A5/JS%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6.html",
      "headers": [
        {
          "level": 3,
          "title": "宏任务(macrotask)和微任务(microtask)",
          "slug": "宏任务-macrotask-和微任务-microtask"
        },
        {
          "level": 3,
          "title": "Node中的事件循环",
          "slug": "node中的事件循环"
        }
      ]
    },
    {
      "title": "原型和原型链",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/javascript%E6%B7%B1%E5%85%A5/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE.html",
      "relativePath": "javascript进阶/javascript深入/原型和原型链.md",
      "key": "v-ec4394b2",
      "path": "/javascript%E8%BF%9B%E9%98%B6/javascript%E6%B7%B1%E5%85%A5/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE.html"
    },
    {
      "title": "note",
      "frontmatter": {},
      "regularPath": "/note/",
      "relativePath": "note/README.md",
      "key": "v-816865b2",
      "path": "/note/"
    },
    {
      "title": "css 1",
      "frontmatter": {},
      "regularPath": "/note/css.html",
      "relativePath": "note/css.md",
      "key": "v-20053ca4",
      "path": "/note/css.html",
      "headers": [
        {
          "level": 2,
          "title": "css2",
          "slug": "css2"
        },
        {
          "level": 2,
          "title": "css3",
          "slug": "css3"
        }
      ]
    },
    {
      "title": "vue1",
      "frontmatter": {},
      "regularPath": "/note/vue.html",
      "relativePath": "note/vue.md",
      "key": "v-34017dde",
      "path": "/note/vue.html",
      "headers": [
        {
          "level": 2,
          "title": "vue2",
          "slug": "vue2"
        }
      ]
    },
    {
      "title": "Promise实现",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/JS%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C%E4%B8%93%E9%A2%98/promise%E5%AE%9E%E7%8E%B0.html",
      "relativePath": "javascript进阶/JS异步操作专题/promise实现.md",
      "key": "v-27bd2e68",
      "path": "/javascript%E8%BF%9B%E9%98%B6/JS%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C%E4%B8%93%E9%A2%98/promise%E5%AE%9E%E7%8E%B0.html"
    },
    {
      "title": "发布订阅模式",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/5.%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F.html",
      "relativePath": "javascript进阶/JS设计模式/5.发布订阅模式.md",
      "key": "v-c44d3f10",
      "path": "/javascript%E8%BF%9B%E9%98%B6/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/5.%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F.html",
      "headers": [
        {
          "level": 2,
          "title": "发布订阅模式又称观察者模式，它定义一种一对多的依赖关系",
          "slug": "发布订阅模式又称观察者模式，它定义一种一对多的依赖关系"
        }
      ]
    },
    {
      "title": "this, call, apply, bind",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/javascript%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0/this%E6%8C%87%E5%90%91%E5%92%8Ccall,apply,bind,new%08%E7%9A%84%E5%AE%9E%E7%8E%B0.html",
      "relativePath": "javascript进阶/javascript原理实现/this指向和call,apply,bind,new\b的实现.md",
      "key": "v-621890fe",
      "path": "/javascript%E8%BF%9B%E9%98%B6/javascript%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0/this%E6%8C%87%E5%90%91%E5%92%8Ccall,apply,bind,new%08%E7%9A%84%E5%AE%9E%E7%8E%B0.html",
      "headers": [
        {
          "level": 2,
          "title": "this指向",
          "slug": "this指向"
        },
        {
          "level": 2,
          "title": "call, apply, bind, new的实现",
          "slug": "call-apply-bind-new的实现"
        },
        {
          "level": 3,
          "title": "call , apply",
          "slug": "call-apply"
        },
        {
          "level": 3,
          "title": "bind",
          "slug": "bind"
        },
        {
          "level": 3,
          "title": "new",
          "slug": "new"
        }
      ]
    },
    {
      "title": "javascript 执行机制总结",
      "frontmatter": {},
      "regularPath": "/javascript%E8%BF%9B%E9%98%B6/javascript%E6%B7%B1%E5%85%A5/%08JS%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6%E6%B7%B1%E5%85%A5%E6%80%BB%E7%BB%93.html",
      "relativePath": "javascript进阶/javascript深入/\bJS执行机制深入总结.md",
      "key": "v-0db4b305",
      "path": "/javascript%E8%BF%9B%E9%98%B6/javascript%E6%B7%B1%E5%85%A5/%08JS%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6%E6%B7%B1%E5%85%A5%E6%80%BB%E7%BB%93.html",
      "headers": [
        {
          "level": 2,
          "title": "词法作用域",
          "slug": "词法作用域"
        },
        {
          "level": 2,
          "title": "执行上下文栈",
          "slug": "执行上下文栈"
        },
        {
          "level": 2,
          "title": "变量对象",
          "slug": "变量对象"
        },
        {
          "level": 3,
          "title": "函数上下文",
          "slug": "函数上下文"
        },
        {
          "level": 2,
          "title": "执行过程",
          "slug": "执行过程"
        },
        {
          "level": 3,
          "title": "进入执行上下文",
          "slug": "进入执行上下文"
        },
        {
          "level": 3,
          "title": "代码执行",
          "slug": "代码执行"
        },
        {
          "level": 3,
          "title": "总结",
          "slug": "总结"
        },
        {
          "level": 2,
          "title": "作用域链",
          "slug": "作用域链"
        },
        {
          "level": 3,
          "title": "函数激活",
          "slug": "函数激活"
        },
        {
          "level": 3,
          "title": "函数的参数",
          "slug": "函数的参数"
        },
        {
          "level": 3,
          "title": "函数的操作",
          "slug": "函数的操作"
        },
        {
          "level": 3,
          "title": "JS中的栈内存和堆内存",
          "slug": "js中的栈内存和堆内存"
        },
        {
          "level": 3,
          "title": "函数执行上下文中作用域链和变量对象的创建过程",
          "slug": "函数执行上下文中作用域链和变量对象的创建过程"
        },
        {
          "level": 2,
          "title": "t\u001dhis指向",
          "slug": "this指向"
        },
        {
          "level": 3,
          "title": "普通函数",
          "slug": "普通函数"
        },
        {
          "level": 3,
          "title": "箭头函数",
          "slug": "箭头函数"
        },
        {
          "level": 2,
          "title": "执行上下文过程总结",
          "slug": "执行上下文过程总结"
        },
        {
          "level": 2,
          "title": "参考文献",
          "slug": "参考文献"
        }
      ]
    }
  ],
  "themeConfig": {
    "nav": [
      {
        "text": "首页",
        "link": "/"
      },
      {
        "text": "javascript进阶",
        "link": "/javascript进阶/"
      },
      {
        "text": "css进阶",
        "link": "/css进阶/"
      }
    ],
    "sidebar": {
      "/javascript进阶": [
        {
          "title": "第一章：DOM",
          "collapsable": true,
          "children": [
            "javascript进阶/DOM/js上传文件的方式"
          ]
        },
        {
          "title": "第二章：JS常用代码原理实现",
          "collapsable": true,
          "children": [
            [
              "javascript进阶/javascript原理实现/深拷贝和浅拷贝的实现",
              "1.深拷贝和浅拷贝的实现"
            ],
            [
              "javascript进阶/javascript原理实现/不同继承方式的实现",
              "2.不同继承方式的实现"
            ],
            [
              "javascript进阶/javascript原理实现/DOM树的深度和广度遍历",
              "3.DOM树的深度和广度遍历"
            ],
            [
              "javascript进阶/javascript原理实现/this指向和call,apply,bind,new\b的实现",
              "4.this指向和call,apply,bind,new\b的实现"
            ],
            [
              "javascript进阶/javascript原理实现/获取函数中的参数",
              "5.函数中的参数传递"
            ],
            [
              "javascript进阶/javascript原理实现/数组去重,扁平, 最值",
              "6.数组去重,扁平, 最值"
            ],
            [
              "javascript进阶/javascript原理实现/for in 和for of循环和可迭代对象",
              "7.for in 和for of循环和可迭代对象"
            ],
            [
              "javascript进阶/javascript原理实现/throttle和debounce",
              "8.throttle和debounce"
            ]
          ]
        },
        {
          "title": "第三章：JS深入",
          "collapsable": true,
          "children": [
            [
              "javascript进阶/javascript深入/原型和原型链",
              "1.原型和原型链"
            ],
            [
              "javascript进阶/javascript深入/JS事件循环执行机制",
              "2.JS事件循环执行机制"
            ],
            [
              "javascript进阶/javascript深入/\bJS执行机制深入总结",
              "3.\bJS执行机制深入总结"
            ]
          ]
        },
        {
          "title": "第四章：JS设计模式",
          "collapsable": true,
          "children": [
            [
              "javascript进阶/JS设计模式/1.单例模式",
              "1.单例模式"
            ],
            [
              "javascript进阶/JS设计模式/2.策略模式",
              "2.策略模式"
            ],
            [
              "javascript进阶/JS设计模式/3.代理模式",
              "3.代理模式"
            ],
            [
              "javascript进阶/JS设计模式/4.迭代器模式",
              "4.迭代器模式"
            ],
            [
              "javascript进阶/JS设计模式/5.发布订阅模式",
              "5.发布订阅模式"
            ],
            [
              "javascript进阶/JS设计模式/6.命令模式",
              "6.命令模式"
            ],
            [
              "javascript进阶/JS设计模式/7.组合模式",
              "7.组合模式"
            ],
            [
              "javascript进阶/JS设计模式/8.模板方法模式",
              "8.模板方法模式"
            ],
            [
              "javascript进阶/JS设计模式/9.享元模式",
              "9.享元模式"
            ],
            [
              "javascript进阶/JS设计模式/10.职责链模式",
              "10.职责链模式"
            ],
            [
              "javascript进阶/JS设计模式/11.中介者模式",
              "11.中介者模式"
            ],
            [
              "javascript进阶/JS设计模式/12.装饰者模式",
              "12.装饰者模式"
            ],
            [
              "javascript进阶/JS设计模式/13.状态模式",
              "13.状态模式"
            ],
            [
              "javascript进阶/JS设计模式/14.适配器模式",
              "14.适配器模式"
            ],
            [
              "javascript进阶/JS设计模式/高阶函数",
              "高阶函数"
            ]
          ]
        },
        {
          "title": "第五章：JS异步操作专题",
          "collapsable": true,
          "children": [
            [
              "javascript进阶/JS异步操作专题/promise,generator,async,await",
              "1.promise, generator, async, await"
            ],
            [
              "javascript进阶/JS异步操作专题/promise实现",
              "2.Promise实现"
            ],
            [
              "javascript进阶/JS异步操作专题/xhr,ajax,axios,fetch异步请求梳理",
              "3.xhr, ajax, axios, fetch异步请求梳理"
            ]
          ]
        },
        {
          "title": "第六章：Vue 笔记",
          "collapsable": true,
          "children": [
            [
              "javascript进阶/Vue 笔记/Vue生命周期图示",
              "1.Vue生命周期图示"
            ],
            [
              "javascript进阶/Vue 笔记/Vue slot嵌套传递和render中的$slotScoped属性",
              "2.Vue slot嵌套传递和render中的$slotScoped属性"
            ]
          ]
        }
      ],
      "/css进阶": [
        {
          "title": "第一章：基线，line-height和vertical-align",
          "collapsable": true,
          "children": [
            "css进阶/chapter1/line-height和vertical-align",
            "css进阶/chapter1/temp"
          ]
        }
      ]
    }
  }
}